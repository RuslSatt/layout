const del = require('del');
const fileinclude = require('gulp-file-include');

//===Переменная с обработанными файлами==========//
let project_folder = require("path").basename(__dirname);
//===Переменная с обработанными файлами==========//
//===Переменная с исходными файлами==========//
let source_folder = "#src";
//===Переменная с исходными файлами==========//
//===Переменная с для подключения шрифта в стили==========//
let fs = require('fs');
//===Переменная с для подключения шрифта в стили==========//

//*================================================================================================//

//===Переменная с путями к папкам и файлам==========//
let path = {
   build: {
      html: project_folder + "/",
      css: project_folder + "/css/",
      js: project_folder + "/js/",
      img: project_folder + "/img/",
      fonts: project_folder + "/fonts/",
   },
   src: {
      html: [source_folder + "/*.html", "!" + source_folder + "/_*.html"],
      css: source_folder + "/scss/project.scss",
      js: source_folder + "/js/script.js",
      img: source_folder + "/img/**/*.{jpg,png,svg,gif,ico,webp}",
      fonts: source_folder + "/fonts/*.ttf",
   },
   watch: {
      html: source_folder + "/**/*.html",
      css: source_folder + "/scss/**/*.scss",
      js: source_folder + "/js/**/*.js",
      img: source_folder + "/img/**/*.{jpg,png,svg,gif,ico,webp}",
   },
   clean: "./" + project_folder + "/"
}
//===Переменная с путями к папкам и файлам==========//

//*==================================================================================================//

//===Переменная которая помогает в написании сценария================//
let { src, dest } = require('gulp'),
   gulp = require('gulp');
const autoPrefixer = require('gulp-autoprefixer');

//===Переменная которая помогает в написании сценария================//

//===Переменная плагина обновления браузера ======//
browsersync = require("browser-sync").create(),
   //===Переменная плагина обновления браузера ======//

   //=========Переменная плагина sass==========================//
   scss = require('gulp-sass')(require('sass')),
   //==========Переменная плагина sass=========================//
   //==========Переменная плагина autoprefixer=================//
   autoprefixer = require("gulp-autoprefixer"),
   //==========Переменная плагина autoprefixer=================//
   //==========Переменная плагина media=================//
   group_media = require("gulp-group-css-media-queries"),
   //==========Переменная плагина media=================//
   //==========Переменная плагина clean-css=================//
   cleancss = require("gulp-clean-css"),
   //==========Переменная плагина clean-css=================//
   //==========Переменная плагина rename=================//
   rename = require("gulp-rename"),
   //==========Переменная плагина rename=================//
   //==========Переменная плагина для сжатия js=================//
   uglify = require("gulp-uglify-es").default,
   //==========Переменная плагина для сжатия js=================//
   //==========Переменная плагина сжатия картинок=================//
   imagemin = require("gulp-imagemin"),
   //==========Переменная плагина для сжатия картинок=================//
   //==========Переменная плагина сжатия картинок=================//
   webp = require("gulp-webp"),
   //==========Переменная плагина для сжатия картинок=================//
   //==========Переменная плагина подключения webp картинок=================//
   webphtml = require("gulp-webp-html"),
   //==========Переменная плагина подключения webp картинок=================//
   //==========Переменная плагина подключения webp картинок через bg=================//
   webpcss = require("gulp-webpcss"),
   //==========Переменная плагина подключения webp картинок через bg=================//
   //==========Переменная для конвертации шрифтов ttf=========================//
   ttf2woff = require("gulp-ttf2woff"),
   ttf2woff2 = require("gulp-ttf2woff2"),
   //==========Переменная для конвертации шрифтов ttf=========================//
   //==========Переменная для конвертации шрифтов otf=========================//
   fonter = require("gulp-fonter"),
   //==========Переменная для конвертации шрифтов otf=========================//
   //==========Переменная плагина для спрайтов svg=================//
   svgSprite = require("gulp-svg-sprite");
//==========Переменная плагина для спрайтов svg=================//
//*==================================================================================================//

//!===Функция которая обновляет страницу==============================================================//
function browserSync(params) {
   browsersync.init({
      //====Настройки плагина========================//
      server: {
         //=========Базовая папка====================//
         baseDir: "./" + project_folder + "/"
         //=========Базовая папка====================//
      },
      port: 3000,
      //=======Убирает табличку "браузер обновился"====================//
      notify: false
      //=======Убирает табличку "браузер обновился"====================//
   })
}

//!===Функция которая обновляет страницу==============================================================//

//*==================================================================================================//

//!===Функция которая подключает шрифты в стили fs==============================================================//

//===Функция которая отвечает за подкл шрифта в стили=================================//
function fontsStyle(params) {
   let file_content = fs.readFileSync(source_folder + '/scss/fonts.scss');
   if (file_content == '') {
      fs.writeFile(source_folder + '/scss/fonts.scss', '', cb);
      return fs.readdir(path.build.fonts, function (err, items) {
         if (items) {
            let c_fontname;
            for (var i = 0; i < items.length; i++) {
               let fontname = items[i].split('.');
               fontname = fontname[0];
               if (c_fontname != fontname) {
                  fs.appendFile(source_folder + '/scss/fonts.scss', '@include font("' + fontname + '", "' + fontname + '", "400", "normal");\r\n', cb);
               }
               c_fontname = fontname;
            }
         }
      })
   }
}
//===Функция которая отвечает за подкл шрифта в стили=================================//

//===Функция которая нужна для корректной работы подкл шрифта в стили===================//
function cb() {

}
//===Функция которая нужна для корректной работы подкл шрифта в стили====================//

//!===Функция которая подключает шрифты в стили fs==============================================================//

//*==================================================================================================//

//!===Функция которая cледит за файлами==================================================================//
function watchFiles(params) {
   gulp.watch([path.watch.html], html);
   gulp.watch([path.watch.css], css);
   gulp.watch([path.watch.js], js);
   gulp.watch([path.watch.img], images);
}
//!===Функция которая cледит за файлами==================================================================//

//*==================================================================================================//

//!===Функция которая чистит папку dist==============================================================//
function clean(params) {
   return del(path.clean);
}
//!===Функция которая чистит папку dist==============================================================//

//*==================================================================================================//

//!=======Перменные выполнения и коннекта с галпом=====================================================//
//=======Переменная сценария выполнения====================//
let build = gulp.series(clean, gulp.parallel(js, images, css, html, fonts));
let watch = gulp.series(build, gulp.parallel(watchFiles, browserSync, fontsStyle));
//=======Переменная сценария выполненияи====================//

//=======Коннектим галп с нашими перменными====================//
exports.fontsStyle = fontsStyle;
exports.fonts = fonts;
exports.images = images;
exports.js = js;
exports.css = css;
exports.build = build;
exports.html = html;
exports.watch = watch;
exports.default = watch;
//=======Коннектим галп с нашими перменными====================//
//!=======Перменные выполнения и коннекта с галпом=====================================================//

//*==================================================================================================//

//!====Создание папок и сбор файлов html===================================================================//
//=======Функция для html=============================================//
function html() {
   //============Путь к исходным файлам==========//
   return src(path.src.html)
      //============Путь к исходным файлам==========//

      //============Сбор файлов==========//
      .pipe(fileinclude())
      //============Сбор файлов==========//
      //============Подключение webp==========//
      .pipe(webphtml())
      //============Подключение webp==========//
      //==========Переброс исходных папок в папку назначения=============//
      .pipe(dest(path.build.html))
      .pipe(browsersync.stream())

   //========Команды, которые должен выполнять галп==================//

   //========Команды, которые должен выполнять галп==================//
}
//=======Функция для html=============================================//
//!====Создание папок и сбор файлов html===================================================================//

//*========================================================================================================//

//!====Создание папок и сбор файлов css===================================================================//
function css() {
   return src(path.src.css)

      //=========Добавляем различные настройки для обработки=============//
      .pipe(
         scss({
            //===Не сжимает scss файл========//
            outputStyle: 'expanded'
            //===Не сжимает scss файл========//
         })
            .on('error', scss.logError)
      )

      //=====Задача к выполнению autoprefixer================//
      .pipe(
         autoprefixer({
            overrideBrowserslist: ["last 5 versions"],
            cascade: true
         })
      )
      //=====Задача к выполнению autoprefixer================//

      //=====Задача к выполнению media================//
      .pipe(
         group_media()
      )
      //=====Задача к выполнению media================//
      //=========Подключение webp через bg=============//
      .pipe(
         webpcss({})
      )
      //=========Подключение webp через bg=============//
      //=========Выгрузка перед rename=================//
      .pipe(dest(path.build.css))
      //=========Выгрузка перед rename=================//

      //=====Задача к выполнению clean-csss================//
      .pipe(cleancss())
      //=====Задача к выполнению clean-css================//

      //=====Задача к выполнению rename================//
      .pipe(
         //=======Переименования файла-сжатый файл=====//
         rename({
            extname: ".min.css"
         })
         //=======Переименования файла-сжатый файл=====//
      )
      //=====Задача к выполнению rename================//
      //=========Добавляем различные настройки для обработки=============//

      .pipe(dest(path.build.css))
      .pipe(browsersync.stream())
}
//!====Создание папок и сбор файлов css===================================================================//

//*=======================================================================================================//

//!====Создание папок и сбор файлов JS===================================================================//

function js() {
   //============Путь к исходным файлам==========//
   return src(path.src.js)
      //============Путь к исходным файлам==========//
      //============Сбор файлов==========//
      .pipe(fileinclude())
      //============Сбор файлов==========//
      //============Выгрузка перед сжатием=============//
      .pipe(dest(path.build.js))
      //============Выгрузка перед сжатием=============//
      //============Сжатие=============================//
      .pipe(
         uglify()
      )
      //============Сжатие=============================//
      //=====Задача к выполнению rename================//
      .pipe(
         //=======Переименования файла-сжатый файл=====//
         rename({
            extname: ".min.js"
         })
         //=======Переименования файла-сжатый файл=====//
      )
      //=====Задача к выполнению rename================//

      //==========Переброс исходных папок в папку назначения=============//
      .pipe(dest(path.build.js))
      .pipe(browsersync.stream())
}
//!====Создание папок и сбор файлов JS===================================================================//

//*=======================================================================================================//

//!============Конструкция для svg sprite для отдельного вызова========================//
gulp.task('svgSprite', function () {
   //================Исходник==============================//
   return gulp.src([source_folder + '/iconsprite/*.svg'])
      //================Исходник==============================//
      //================Обработка=============================//
      .pipe(svgSprite({
         mode: {
            stack: {
               sprite: "../icons/icons.svg", // Имя готовго спрайта (файла)
               example: true //====Примеры иконок в html====//
            }
         },
      }
      ))
      //=====Выгрузка=======================//
      .pipe(dest(path.build.img))
   //=====Выгрузка=======================//
   //================Обработка=============================//
})
//!============Конструкция для svg sprite для отдельного вызова========================//

//*=======================================================================================================//

//!============Конструкция для fonter otfttf для отдельного вызова========================//
gulp.task('otf2ttf', function () {
   //================Исходник==============================//
   return src([source_folder + '/fonts/*.otf'])
      //================Исходник==============================//
      //================Обработка=============================//
      .pipe(fonter({
         formats: ['ttf']
      }))
      //=====Выгрузка=======================//
      .pipe(dest(source_folder + '/fonts/'));
   //=====Выгрузка=======================//
   //================Обработка=============================//
})
//!============Конструкция для fonter otfttf для отдельного вызова========================//

//*=======================================================================================================//

//!====Создание папок и сбор файлов image===================================================================//

function images() {
   //============Путь к исходным файлам==========//
   return src(path.src.img)
      //============Путь к исходным файлам==========//
      //============Обработка img======================//
      .pipe(
         webp({
            quality: 70
         })
      )
      //============Обработка img======================//
      //============Выгрузка картинки в формате webp===========//
      .pipe(dest(path.build.img))
      //============Выгрузка картинки в формате webp===========//
      //=======Обращение к исходнику================//
      .pipe(src(path.src.img))
      //=======Обращение к исходнику================//
      //============Сжатие img======================//
      .pipe(
         imagemin({
            progressive: true,
            svgoPlugins: [{ removeViewBox: false }],
            interlaced: true,
            optimizationLevel: 3 //0 for 7
         })
      )
      //============Сжатие img======================//
      //==========Переброс исходных папок в папку назначения=============//
      .pipe(dest(path.build.img))
      .pipe(browsersync.stream())
}
//!====Создание папок и сбор файлов image===================================================================//

//*=======================================================================================================//

//!====Создание папок и сбор файлов fonts===================================================================//
//=======Функция для fonts=============================================//
function fonts() {
   //============Путь к исходным файлам==========//
   src(path.src.fonts)
      //============Путь к исходным файлам==========//
      //============Конвертация шрифтов=============//
      .pipe(ttf2woff())
      //=======Выгрузка конвертированного шрифта==============//
      .pipe(dest(path.build.fonts))
   //=======Выгрузка конвертированного шрифта==============//
   //============Путь к исходным файлам==========//
   return src(path.src.fonts)
      //============Путь к исходным файлам==========//
      .pipe(ttf2woff2())
      //=======Выгрузка конвертированного шрифта==============//
      .pipe(dest(path.build.fonts))
   //=======Выгрузка конвертированного шрифта==============//
   //============Конвертация шрифтов=============//
}
//=======Функция для fonts=============================================//
//!====Создание папок и сбор файлов fonts===================================================================//